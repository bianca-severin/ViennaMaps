// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ViennaMaps.Models
{
    public partial class UrbanAnalysisContext : DbContext
    {
        public UrbanAnalysisContext()
        {
        }

        public UrbanAnalysisContext(DbContextOptions<UrbanAnalysisContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Analysis> Analysis { get; set; }
        public virtual DbSet<AnalysisType> AnalysisType { get; set; }
        public virtual DbSet<AnalysisValue> AnalysisValue { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Layer> Layer { get; set; }
        public virtual DbSet<LayerGroup> LayerGroup { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<ProjectScale> ProjectScale { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-JQD9J6V\\SQLEXPRESS;Initial Catalog=UrbanAnalysis;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Analysis>(entity =>
            {
                entity.HasKey(e => e.AnalyisId)
                    .HasName("PK__Analysis__BBD431D6A7EAF0F2");

                entity.Property(e => e.AnalyisId)
                    .ValueGeneratedNever()
                    .HasColumnName("AnalyisID");

                entity.Property(e => e.AnalysisName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AnalysisTypeId).HasColumnName("AnalysisTypeID");

                entity.Property(e => e.DiagramType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MeasurmentUnit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.AnalysisType)
                    .WithMany(p => p.Analysis)
                    .HasForeignKey(d => d.AnalysisTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("analysis_analysistypeid_foreign");
            });

            modelBuilder.Entity<AnalysisType>(entity =>
            {
                entity.Property(e => e.AnalysisTypeId).HasColumnName("AnalysisTypeID");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AnalysisValue>(entity =>
            {
                entity.Property(e => e.AnalysisValueId)
                    .ValueGeneratedNever()
                    .HasColumnName("AnalysisValueID");

                entity.Property(e => e.AnalysisId).HasColumnName("AnalysisID");

                entity.Property(e => e.Label).HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Analysis)
                    .WithMany(p => p.AnalysisValue)
                    .HasForeignKey(d => d.AnalysisId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("analysisvalue_analysisid_foreign");

                entity.HasMany(d => d.District)
                    .WithMany(p => p.AnalysisValue)
                    .UsingEntity<Dictionary<string, object>>(
                        "AnalysisLocation",
                        l => l.HasOne<Location>().WithMany().HasForeignKey("DistrictId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("analysislocation_districtid_foreign"),
                        r => r.HasOne<AnalysisValue>().WithMany().HasForeignKey("AnalysisValueId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AnalysisLocation_AnalysisValue"),
                        j =>
                        {
                            j.HasKey("AnalysisValueId", "DistrictId").HasName("PK__Analysis__DDA209B205526987");

                            j.ToTable("AnalysisLocation");

                            j.IndexerProperty<int>("AnalysisValueId").HasColumnName("AnalysisValueID");

                            j.IndexerProperty<int>("DistrictId").HasColumnName("DistrictID");
                        });
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.Property(e => e.CityId)
                    .ValueGeneratedNever()
                    .HasColumnName("CityID");

                entity.Property(e => e.CityName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.City)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("city_countryid_foreign");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.CountryId)
                    .ValueGeneratedNever()
                    .HasColumnName("CountryID");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Layer>(entity =>
            {
                entity.Property(e => e.LayerId)
                    .ValueGeneratedNever()
                    .HasColumnName("LayerID");

                entity.Property(e => e.ArcGisuri)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("ArcGISUri");

                entity.Property(e => e.LayerDataSource)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LayerGroupId).HasColumnName("LayerGroupID");

                entity.Property(e => e.LayerLabel)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LayerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.LayerGroup)
                    .WithMany(p => p.Layer)
                    .HasForeignKey(d => d.LayerGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("layer_layergroupid_foreign");
            });

            modelBuilder.Entity<LayerGroup>(entity =>
            {
                entity.Property(e => e.LayerGroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("LayerGroupID");

                entity.Property(e => e.GroupLabel)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasKey(e => e.DistrictId)
                    .HasName("PK__District__85FDA4C68C909572");

                entity.Property(e => e.DistrictId).ValueGeneratedNever();

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.DistrictName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Latitude)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Longitude)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Location)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("district_cityid_foreign");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.Property(e => e.ProjectId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProjectID");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectScaleId).HasColumnName("ProjectScaleID");

                entity.HasOne(d => d.ProjectScale)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.ProjectScaleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("project_projectscaleid_foreign");

                entity.HasMany(d => d.Analysis)
                    .WithMany(p => p.Project)
                    .UsingEntity<Dictionary<string, object>>(
                        "ProjectAnalysis",
                        l => l.HasOne<Analysis>().WithMany().HasForeignKey("AnalysisId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ProjectAnalysis_Analysis"),
                        r => r.HasOne<Project>().WithMany().HasForeignKey("ProjectId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("projectanalysis_projectid_foreign"),
                        j =>
                        {
                            j.HasKey("ProjectId", "AnalysisId");

                            j.ToTable("ProjectAnalysis");

                            j.IndexerProperty<int>("ProjectId").HasColumnName("ProjectID");

                            j.IndexerProperty<int>("AnalysisId").HasColumnName("AnalysisID");
                        });

                entity.HasMany(d => d.Layer)
                    .WithMany(p => p.Project)
                    .UsingEntity<Dictionary<string, object>>(
                        "ProjectLayer",
                        l => l.HasOne<Layer>().WithMany().HasForeignKey("LayerId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("projectlayer_layerid_foreign"),
                        r => r.HasOne<Project>().WithMany().HasForeignKey("ProjectId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("projectlayer_projectid_foreign"),
                        j =>
                        {
                            j.HasKey("ProjectId", "LayerId");

                            j.ToTable("ProjectLayer");

                            j.IndexerProperty<int>("ProjectId").HasColumnName("ProjectID");

                            j.IndexerProperty<int>("LayerId").HasColumnName("LayerID");
                        });
            });

            modelBuilder.Entity<ProjectScale>(entity =>
            {
                entity.Property(e => e.ProjectScaleId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProjectScaleID");

                entity.Property(e => e.ScaleName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}